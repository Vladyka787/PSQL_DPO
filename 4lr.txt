CREATE TABLE public.randomFirst (
    id integer generated by DEFAULT AS identity PRIMARY KEY,
    time timestamp NOT NULL DEFAULT NOW(),
    str varchar(128),
    boolean bool NOT NULL DEFAULT false,
    num numeric,
    integer int,
    json_data jsonb
);

CREATE EXTENSION pg_trgm;
CREATE EXTENSION btree_gist;




INSERT INTO public.randomFirst (
    id,
    time,
    str,
    boolean,
    num,
    integer,
    json_data,
)
SELECT 
    a.id, 

    timestamp '2000-01-01 00:00:00' + CONCAT(a.id::text, ' day ', TRUNC(RANDOM() * 22 + 1), ' hours ')::interval,

    substring(md5(random()::text) from 0 for 64),

    (CASE WHEN RANDOM() > 0.4 THEN true ELSE false END),

    TRUNC(RANDOM() * 1000 + 100),

    TRUNC(RANDOM() * 1000 + 5),

    jsonb_build_object(
      'numJson', TRUNC(RANDOM() * 400 + 100),
      'boolJson', (CASE WHEN random() > 0.6 THEN true ELSE false END)
    )
FROM 
    generate_series(1, 10000) AS a(id)
ORDER BY a.id;



EXPLAIN ANALYZE


SELECT *
FROM randomFirst AS r
WHERE r.boolean = true AND r.id = 9;


SELECT r.id, r.str, r.num
FROM randomFirst AS r
WHERE r.boolean = true
ORDER BY r.integer
LIMIT 100;

SELECT r.id, r.str, r.num
FROM randomFirst AS r
WHERE r.boolean = true
ORDER BY r.num DESC
LIMIT 100;

SELECT r.id, r.str, r.num
FROM randomFirst AS r
WHERE 
r.id in (100,50,67,28,13,41)
ORDER BY r.integer
LIMIT 100;

SELECT r.id, r.str, r.num
FROM randomFirst AS r
WHERE r.boolean = true AND r.str like '6060ad546f581c251a070ae894014574'
ORDER BY r.integer
LIMIT 100;

SELECT *
FROM randomFirst AS r
WHERE 
r.time BETWEEN '2001-01-01 00:00:00' AND '2001-02-01 00:00:00'
LIMIT 100;

SELECT
  json_data->'numJson' AS numJSON
FROM
  randomFirst AS r
WHERE
  json_data @> '{ "boolJson": false }'
LIMIT 1000;


CREATE INDEX integer_btree_idx ON randomFirst USING btree (integer);

CREATE INDEX partial_btree_idx ON randomFirst (id) WHERE boolean = true;


CREATE INDEX hash_idx ON randomFirst USING hash (id);

CREATE INDEX gin_idx ON randomFirst USING gin (str gin_trgm_ops);

CREATE INDEX gin_idx_json on randomFirst USING gin (json_data jsonb_path_ops);

CREATE INDEX brin_idx ON randomFirst USING brin (time);
